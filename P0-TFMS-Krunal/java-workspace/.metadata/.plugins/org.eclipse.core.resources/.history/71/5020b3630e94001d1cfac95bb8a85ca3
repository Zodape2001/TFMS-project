package com.revature.model;
import java.util.Scanner;
import com.revature.constant.Constant; //Importing "Constant" class of com.revature.constant where all constants are hardcoded

public class Menu {
	public void menuList() {
//		Creating "constant" object of Constant class
		Constant constant = new Constant();		
		
		Scanner scInt = new Scanner(System.in);
		
//		Printing constant/variable which are hardcoded in "Constant" class of com.revature.constant package because if 
//		any changes required in future no need to search the constant/variable in the entire file just go to the "Constant" class of 
//		com.revature.constant package and change there only, It will reflect everywhere.
		
		System.out.println(constant.APPLICATIONSHMENU);	 // 'APPLICATIONSHMENU' --> variable present in "Constant" class
		System.out.println(constant.APPLICATIONADDDETAILS);	 // 'APPLICATIONADDDETAILS' --> variable present in "Constant" class
		System.out.println(constant.APPLICATIONTRAINERDETAILS);	 // 'APPLICATIONTRAINERDETAILS' --> variable present in "Constant" class
		System.out.println(constant.APPLICATIONDELETETRAINERDETAILS);	 // 'APPLICATIONDELETETRAINERDETAILS' --> variable present in "Constant" class
		System.out.println(constant.APPLICATIONUPDATETRAINERDETAILS);	 // 'APPLICATIONUPDATETRAINERDETAILS' --> variable present in "Constant" class
		
//		Creating an object of "ChildTrainerDetails" which is a chile of an interface "TrainerDetails" where all CRUD methods 
//		are stored as an abstract method 
		ChildTrainerDetails ctd = new ChildTrainerDetails();
		
//		Taking user input for chaking switch case.
		int press = scInt.nextInt();
		
		switch(press)
		{
			case 1:
				System.out.println(constant.SWITCHADDDETAILS); // 'SWITCHADDDETAILS' --> variable present in "Constant" class
				ctd.addDetails(); // calling `addDetails()` method present in "TrainerDetails" interface
				break;
			case 2:
				System.out.println(constant.SWITCHTRAINERDETAILS);// 'SWITCHTRAINERDETAILS' --> variable present in "Constant" class
				ctd.showTrainerDetails(); // calling `showTrainerDetails()` method present in "TrainerDetails" interface
				break;
			case 3:
				System.out.println(constant.SWITCHDELETETRAINERDETAILS);// 'SWITCHDELETETRAINERDETAILS' --> variable present in "Constant" class
				ctd.deleteTrainerDetails(); // calling `deleteTrainerDetails()` method present in "TrainerDetails" interface
				break;
			case 4:
				System.out.println(constant.SWITCHUPDATETRAINERDETAILS);// 'SWITCHUPDATETRAINERDETAILS' --> variable present in "Constant" class
				ctd.editTrainerDetails(); // calling `editTrainerDetails()` method present in "TrainerDetails" interface
				break;
//			case 5:
//				ArrayListSort();
//				break;
			default:
				System.out.println(constant.DEFAULTVALUE);
		}
		scInt.close();

	}
}
