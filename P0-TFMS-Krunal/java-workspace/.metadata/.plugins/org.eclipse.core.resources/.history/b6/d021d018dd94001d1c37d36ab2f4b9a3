package com.revature.model;

import com.revature.constant.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

public interface TrainerDetails {

	static ArrayList<Trainer> trainerList = new ArrayList<Trainer>();

	public abstract void addDetails();
	public abstract void showTrainerDetails();
	public abstract void deleteTrainerDetails();
	public abstract void editTrainerDetails();

}

class ChildTrainerDetails implements TrainerDetails {

	Constant constant = new Constant();
	Menu menu = new Menu();

	Scanner scString = new Scanner(System.in);
	Scanner scInt = new Scanner(System.in);

	int condition;
	String track;

	@Override
	public void addDetails() {
		do {

			System.out.print(constant.ENTERTRAINERID);
			int id = scInt.nextInt();

			System.out.print(constant.ENTERTRAINERNAME);
			String name = scString.nextLine();
 
			String java = TrainerTrack.JAVA.toString();
			String dotnet = TrainerTrack.DOTNET.toString();
			String mainframe = TrainerTrack.MAINFRAME.toString();
			String testing = TrainerTrack.TESTING.toString();
			System.out.print(constant.ENTERTRAINERTRACK);
			
			track = scString.nextLine().toUpperCase();
			if (track.equals(java) || track.equals(dotnet) || track.equals(mainframe) || track.equals(testing)) {

			} else {
				System.out.println("Please check speling and enter correct details again");
				System.out.print(constant.ENTERTRAINERTRACK);
				track = scString.nextLine().toUpperCase();
			}

			System.out.print(constant.ENTERTRAINERQUALIFICATION);
			String qualification = scString.nextLine();

			System.out.print(constant.ENTERTRAINEREXPERIENCE);
			int experience = scInt.nextInt();

			System.out.print(constant.ENTERTRAINERPHONUMBER);
			String phone = scString.nextLine();

			System.out.print(constant.ENTERTRAINEREMAIL);
			String email = scString.nextLine();

			Trainer trainerDetails = new Trainer(id, name, track, qualification, experience, phone, email);
			trainerList.add(trainerDetails);

			System.out.println(constant.CHECKCONDITION);
			condition = scInt.nextInt();

		} while (condition == 1);
		menu.callMenu();
	}

	@Override
	public void showTrainerDetails() {

		for (Trainer a : trainerList) {
			System.out.println(a.toString());
		}
		System.out.println();

		menu.callMenu();
	}

	@Override
	public void deleteTrainerDetails() {
		System.out.println("Enter an Id of the trainer: ");
		int delId = scInt.nextInt();
		Iterator<Trainer> itr = trainerList.iterator();
		int index = -1;
		while(itr.hasNext()) {
			if(itr.next().getTrainerId()==delId) {
				itr.remove();
				index =0;
			}
		}
		if(index==0)
			System.out.println("Deleted Successfully");
		else
			System.out.println("Id does not martched");
		menu.callMenu();
	}

	@Override
	public void editTrainerDetails() {
		
		System.out.println("Enter an Id of the trainer: ");
		int upId = scInt.nextInt();
		Iterator<Trainer> itr = trainerList.iterator();
		int index = -1;
		while(itr.hasNext()) {
			if(itr.next().getTrainerId()==upId) {
				System.out.println("upId"+upId+"getId"+itr.next().getTrainerId());
//				for (Trainer a : trainerList) {
//					
//				}
		}
		if(index==0)
			System.out.println("Updated Successfully");
		else
			System.out.println("Id does not martched");
		menu.callMenu();

		}
	}
}